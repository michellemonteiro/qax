
console.log('Ol√°, JavaScript!')

var userName = 'Michelle Monteiro'

document.getElementById('user-name').innerHTML = userName

//‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è//

// ‚ú¶ VARI√ÅVEIS ‚ú¶ //
//Vari√°veis s√£o unidades de aloca√ß√£o em mem√≥ria para guardar informa√ß√µes

// var nome = 'Mestre Yoda'
// var idade = 100
// var jedi = true

// console.log(typeof nome)
// console.log(typeof idade)
// console.log(typeof jedi)

//‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è//

// ‚ú¶ OPERADORES MATEM√ÅTICOS ‚ú¶ //

// var n1 = 7
// var n2 = 2.5

// console.log(typeof (n1))
// console.log(typeof (n2))

// var total = n1 / n2
// console.log(total)

// + para somar
// - para subtrair
// * para multiplicar
// / para dividir

//‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è//

// ‚ú¶ OPERADORES DE COMPARA√á√ÉO ‚ú¶ //

// var v1 = 16
// var v2 = '5'

// var resultado = v1 >= v2
// console.log(resultado)

//compara√ß√£o de valores utilizamos "=="
//compara√ß√£o de tipagem utilizamos "==="
//para verficar se o valor √© diferente utilizamos "!="
//para verficar se a tipagem √© diferente utilizamos "!=="
//para comparar se o operador da esquerda √© maior que o da direita utilizamos o "Maior que" (>)
//para comparar se o operador √© maior ou igual ao da direita utilizamos o "Maior ou igual que" (>=)
//para comparar se o operador da esquerda √© menor que o da direita utilizamos o "Menor que" (<)
//para comparar se o operador da esquerda √© menor ou igual ao da direita utilizamos o "Menor ou igual que" (<=)

//‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è//

// ‚ú¶ FUN√á√ïES ‚ú¶ //

//ü§ñFun√ß√£o sem retorno, s√≥ executa algo:
// function soma(n1, n2) {
//     console.log(n1 + n2)
// }

// soma(5, 5)

//ü§ñun√ß√£o com efeito colateral (alerta)
// function boasVindas(nome){
//     alert(nome + ', seja bem-vindo(a)')
// }

// boasVindas('Michelle')

//ü§ñFun√ß√£o com retorno
// function soma(n1, n2){
//     return n1 + n2
// }

// var  resultado = soma(5, 5)
// console.log (resultado)

// //üå∏ O que √© uma fun√ß√£o em JavaScript?
// Uma fun√ß√£o √© um bloco de c√≥digo que pode ser usado v√°rias vezes. Pensa assim: √© como uma "receita". 
// Voc√™ escreve a receita uma vez (a fun√ß√£o) e depois pode us√°-la sempre que quiser (chamando a fun√ß√£o). 
// Isso evita repeti√ß√£o de c√≥digo e deixa tudo mais organizado.

//Tipos de Func√µes Vistas:
//ü´¥üèªFun√ß√£o sem retorno, s√≥ executa algo:
// üëâ Aqui, a fun√ß√£o pega dois n√∫meros, soma e mostra no console.
// Ela n√£o devolve o resultado, s√≥ mostra.
// √â √∫til quando voc√™ s√≥ precisa exibir algo, sem guardar para usar depois.

//ü´¥üèªFun√ß√£o com efeito colateral (alerta)
// üëâ Essa fun√ß√£o recebe um nome e mostra uma mensagem na tela.
// O alert √© uma a√ß√£o vis√≠vel pro usu√°rio, mas de novo: n√£o retorna nada, s√≥ faz algo.

//ü´¥üèªFun√ß√£o com retorno
// üëâ Aqui a fun√ß√£o n√£o mostra nada sozinha.
// Ela devolve um valor (return).
// Isso √© muito poderoso, porque voc√™ pode guardar o resultado em uma vari√°vel e usar depois.
// No exemplo:
// soma(5, 5) devolve 10.
// Esse 10 √© guardado em resultado.
// Depois voc√™ pode exibir, somar de novo, passar para outra fun√ß√£o...

// üåü Resumindo:
// Fun√ß√£o sem retorno: faz algo direto (ex: mostrar no console, alertar).
// Fun√ß√£o com retorno: devolve um valor para voc√™ usar depois.
// Por que existem fun√ß√µes?
// Evitar repeti√ß√£o de c√≥digo.
// Organizar melhor o programa.
// Facilitar a manuten√ß√£o (se precisar mudar algo, voc√™ s√≥ muda dentro da fun√ß√£o).
// Reutiliza√ß√£o: voc√™ pode chamar a fun√ß√£o em v√°rios lugares.

//‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è//

// ‚ú¶ CONTROLE DE FLUXOS COM BDD ‚ú¶ //

//Sendo um cliente correntista do banco
//Posso sacar dinheiro em caixas eletr√¥nicos
//Para poder comprar em lugares que n√£o aceitam cart√£o de d√©bito ou cr√©dito

//ü§ñVari√°vel inicial
//üëâ O cliente tem R$1000 de saldo.
// var saldo = 1000

// //ü§ñControle de fluxo dentro da fun√ß√£o
// function saque(valor) {
//     if(valor > saldo){
//         console.log('Valor do saque superior ao saldo')  
//         //‚ùÑÔ∏é Pergunta: o valor do saque √© maior que o saldo? 
//         //‚ùÑÔ∏é 701 > 1000 ‚ùå N√£o √© maior, ent√£o esse bloco n√£o roda.
//     }else if(valor > 700){
//         console.log('Valor do Saque √© superior ao m√°ximo permitido por opera√ß√£o')
//         //Pergunta: o valor do saque √© maior que 700?
//         // ‚ùÑÔ∏é 701 > 700 ‚úÖ Sim, ent√£o roda esse bloco.
//         // ‚ùÑÔ∏é Resultado: aparece a mensagem ‚ÄúValor do saque √© superior ao m√°ximo permitido por opera√ß√£o‚Äù.
//         // ‚ùÑÔ∏é Como entrou nesse bloco, o programa n√£o executa o else final.
//     } else{   
//     saldo = saldo - valor
//     //‚ùÑÔ∏é Esse s√≥ roda se nenhuma condi√ß√£o anterior for verdadeira.
//     // ‚ùÑÔ∏é No caso, n√£o rodou, porque j√° caiu no else if.
//     }

// }
// //ü§ñChamada da Fun√ß√£o
// //üëâ Voc√™ pediu pra sacar R$701.
// saque(701)
// console.log (saldo)
//‚ùÑÔ∏é Como n√£o chegou a subtrair, o saldo continua 1000.

//Cen√°rio 1: Saque com sucesso
//Dado que meu saldo √© de mil reais
//Quando fa√ßo um saque de quinhentos reais
//Ent√£o o valor do saque dever ser deduzido do meu saldo

//Cen√°rio 2: Saque com valor superior ao saldo
//Dado que meu saldo √© de mil reais
//Quando eu fa√ßo um saque de mil e um reais
//Ent√£o n√£o deve deduzir do meu saldo
//E deve mostrar uma mensagem de alerta informando que o valor √© superior ao saldo

//Cen√°rio 3: Saque com valor m√°ximo
//Dado que meu saldo √© de mil reais
//E o valor m√°ximo por opera√ß√£o √© de setessentos reais
//Quando fa√ßo um saque no valor de setessentos e um reais
//Ent√£o n√£o deve deduzir do meu saldo
//E deve mostrar uma mensagem de alerta informando que o valor √© superior ao m√°ximo permitido por opera√ß√£o

// üå∏ O que √© controle de fluxo?
// √â a forma como o programa decide o que vai fazer em cada situa√ß√£o.
// Ou seja: quando voc√™ escreve c√≥digo, ele n√£o precisa seguir s√≥ uma linha reta.
// Ele pode escolher caminhos diferentes dependendo das condi√ß√µes (regras).
// Em JavaScript, quem faz esse papel s√£o principalmente:
// ‚û°Ô∏èif, else if, else ‚Üí verificam condi√ß√µes.
// ‚û°Ô∏èswitch ‚Üí outra forma de testar v√°rias op√ß√µes.
// ‚û°Ô∏èfor, while ‚Üí controlam repeti√ß√µes (looping).
// No seu exemplo, estamos usando o if/else if/else.

// üåü Em resumo:
// O controle de fluxo decide qual parte do c√≥digo vai rodar.
// Ele funciona como perguntas em sequ√™ncia:
// Se a primeira for verdadeira, executa e ignora o resto.
// Se for falsa, passa pra pr√≥xima (else if).
// Se nenhuma condi√ß√£o for verdadeira, cai no else.

// üëâ Uma forma simples de visualizar:
// Se valor > saldo ‚Üí mensagem ‚Äúsem saldo‚Äù.
// Sen√£o se valor > 700 ‚Üí mensagem ‚Äúlimite por opera√ß√£o‚Äù.
// Sen√£o ‚Üí faz o saque.

//‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è//

// ‚ú¶ ARRAYS ‚ú¶ //
//ü§ñ√â um tipo de dado onde voc√™ consegue ter um conjunto de dados, onde voc√™ consegue armazenar informa√ß√µes.

// ‚ú® Caracter√≠sticas principais dos Arrays
// Organizam dados em uma lista.
// Cada elemento do array tem uma posi√ß√£o chamada √≠ndice.
// O √≠ndice come√ßa em 0 (n√£o em 1).
// No exemplo:
// frutas[0] ‚Üí 'ma√ß√£'
// frutas[1] ‚Üí 'banana'
// frutas[2] ‚Üí 'uva'
// Voc√™ pode adicionar, remover, modificar valores dessa lista.

// üåü Onde usamos Arrays?
// Lista de produtos no carrinho de compras.
// Lista de alunos em uma turma.
// N√∫meros de sorteio de uma loteria.
// V√°rias mensagens em um chat.
// Ou seja, sempre que voc√™ precisa lidar com muitos dados juntos em uma √∫nica estrutura.

// var gaveteiro = ['Meias', 'Gravatas', 'Documentos', 'Salgadinhos']

// console.log(gaveteiro[3])

// var personagens = ['Mestre Yoda', 'Luke Skywalker', 'Princesa Leia', 'Darth Vader']

// //ü§ñ Adicionar itens 
// personagens.push('C3pO') 
// personagens.push('R2D2')

// //ü§ñ Renover o √∫ltimo item da lista
// personagens.pop() 

// //ü§ñ Ignorar um item da lista
// personagens = personagens.filter(function(p){
//     return p !== 'Darth Vader'
// })

// //ü§ñ Apresentar somente um item da lista
// personagens = personagens.filter(function(p){
//     return p === 'Mestre Yoda'
// })

// console.log(personagens)

//‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è//

// ‚ú¶ CONTROLES DE REPETI√á√ÉO (LOOPS) ‚ú¶ //

//var personagens = ['Mestre Yoda', 'Luke Skywalker', 'Princesa Leia', 'Darth Vader', 'R2D2']

//ü§ñ Loop da maneira mais simples de codar
// personagens.forEach(function(p){
//     console.log(p)
// })

//ü§ñ Loop da maneira mais elaborada de codar
// for (var i in personagens){
//     console.log(personagens[i])
// }

//ü§ñ Loop para quem √© expert em programa√ß√£o, pois somente desenvolvedores usam essa forma de codar
// for (var i = 0; i < 10; i++) {
//     console.log(i)
//     //c√≥digo vai ser executado at√© a condi√ß√£o retornar "false"
// }

//‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è//

// ‚ú¶ OBJETOS (SUPER VARI√ÅVEIS) ‚ú¶ //
//Objetos √© uma forma muito pr√°tica de armazenamento de informa√ß√µes de forma flex√≠vel e agrupada onde
//consegue-se ter uma cole√ß√£o de valores referenciados por nome.

//ü§ñ Cria√ß√£o do objeto
//var yoda = {
    // ‚ùÑÔ∏é Criamos uma vari√°vel chamada yoda que guarda um objeto.
    
    // ü§ñ Propriedades do objeto
    // nome: 'Mestre Yoda',
    // idade: 100,
    // jedi: true,
    // ‚ùÑÔ∏é Essas s√£o caracter√≠sticas do objeto (como atributos de uma ficha).

    // ü§ñ M√©todo do objeto
    // mostraIdade: function(){
    //     console.log(`A idade do ${this.nome} √©: ${this.idade} anos`)
    // }
    // ‚ùÑÔ∏é Aqui temos uma fun√ß√£o dentro do objeto. Quando uma fun√ß√£o est√° dentro de um objeto, chamamos de m√©todo.
    // this significa este objeto (no caso, yoda). Ent√£o this.nome pega 'Mestre Yoda'. E this.idade pega 100.
//}

// console.log(yoda)
// ü§ñ Chamando o m√©todo
//yoda.mostraIdade()
// ‚ùÑÔ∏é Aqui voc√™ manda o objeto executar sua pr√≥pria fun√ß√£o.

// üåü Em resumo:
// Objeto ‚Üí guarda informa√ß√µes em pares (chave: valor).
// Propriedades ‚Üí dados do objeto (nome, idade, jedi).
// M√©todos ‚Üí fun√ß√µes que pertencem ao objeto.
// this ‚Üí refer√™ncia ao pr√≥prio objeto (acessa os dados dele).

//‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è//

// ‚ú¶ CONSTANTES ‚ú¶ //
//Constante √© um valor que, depois de definido, n√£o pode ser alterado durante a execu√ß√£o do programa. (Perfeitas para criar massas de testes)

// const nome = 'Darth Vader'
// console.log(nome)
